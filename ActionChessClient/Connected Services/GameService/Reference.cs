//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ActionChessClient.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ESideColor", Namespace="http://schemas.datacontract.org/2004/07/GameService")]
    public enum ESideColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        White = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CPoint", Namespace="http://schemas.datacontract.org/2004/07/Animator")]
    [System.SerializableAttribute()]
    public partial struct CPoint : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IGameSeekerService", CallbackContract=typeof(ActionChessClient.GameService.IGameSeekerServiceCallback))]
    public interface IGameSeekerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSeekerService/StartSearchGame")]
        void StartSearchGame(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSeekerService/StartSearchGame")]
        System.Threading.Tasks.Task StartSearchGameAsync(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSeekerService/CancelSearchGame")]
        void CancelSearchGame(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSeekerService/CancelSearchGame")]
        System.Threading.Tasks.Task CancelSearchGameAsync(System.Guid playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSeekerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameSeekerService/CreateGame")]
        void CreateGame(System.Guid gameId, System.Guid opponentId, ActionChessClient.GameService.ESideColor mySideColor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameSeekerServiceChannel : ActionChessClient.GameService.IGameSeekerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameSeekerServiceClient : System.ServiceModel.DuplexClientBase<ActionChessClient.GameService.IGameSeekerService>, ActionChessClient.GameService.IGameSeekerService {
        
        public GameSeekerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameSeekerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameSeekerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSeekerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameSeekerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartSearchGame(System.Guid playerId) {
            base.Channel.StartSearchGame(playerId);
        }
        
        public System.Threading.Tasks.Task StartSearchGameAsync(System.Guid playerId) {
            return base.Channel.StartSearchGameAsync(playerId);
        }
        
        public void CancelSearchGame(System.Guid playerId) {
            base.Channel.CancelSearchGame(playerId);
        }
        
        public System.Threading.Tasks.Task CancelSearchGameAsync(System.Guid playerId) {
            return base.Channel.CancelSearchGameAsync(playerId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IGameManagerService", CallbackContract=typeof(ActionChessClient.GameService.IGameManagerServiceCallback))]
    public interface IGameManagerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/ConnectGameManager")]
        void ConnectGameManager(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/ConnectGameManager")]
        System.Threading.Tasks.Task ConnectGameManagerAsync(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/Leave")]
        void Leave(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/Leave")]
        System.Threading.Tasks.Task LeaveAsync(System.Guid gameId, System.Guid playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/ServerIsReady")]
        void ServerIsReady();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/EndRound")]
        void EndRound(ActionChessClient.GameService.ESideColor winner, bool isLeave);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerServiceChannel : ActionChessClient.GameService.IGameManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerServiceClient : System.ServiceModel.DuplexClientBase<ActionChessClient.GameService.IGameManagerService>, ActionChessClient.GameService.IGameManagerService {
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectGameManager(System.Guid gameId, System.Guid playerId) {
            base.Channel.ConnectGameManager(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task ConnectGameManagerAsync(System.Guid gameId, System.Guid playerId) {
            return base.Channel.ConnectGameManagerAsync(gameId, playerId);
        }
        
        public void Leave(System.Guid gameId, System.Guid playerId) {
            base.Channel.Leave(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(System.Guid gameId, System.Guid playerId) {
            return base.Channel.LeaveAsync(gameId, playerId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IVirtualBoardService", CallbackContract=typeof(ActionChessClient.GameService.IVirtualBoardServiceCallback))]
    public interface IVirtualBoardService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/ConnectBoard")]
        void ConnectBoard(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/ConnectBoard")]
        System.Threading.Tasks.Task ConnectBoardAsync(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/TryMovePiece")]
        void TryMovePiece(System.Guid gameId, int pieceId, ActionChessClient.GameService.CPoint newPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/TryMovePiece")]
        System.Threading.Tasks.Task TryMovePieceAsync(System.Guid gameId, int pieceId, ActionChessClient.GameService.CPoint newPosition);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVirtualBoardServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/MovePiece")]
        void MovePiece(int pieceId, ActionChessClient.GameService.CPoint newPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/HandleCollision")]
        void HandleCollision(int invaderId, int capturedId, bool isCollisionStopsMoving);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IVirtualBoardService/TransformPawnToQueen")]
        void TransformPawnToQueen(int pieceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVirtualBoardServiceChannel : ActionChessClient.GameService.IVirtualBoardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VirtualBoardServiceClient : System.ServiceModel.DuplexClientBase<ActionChessClient.GameService.IVirtualBoardService>, ActionChessClient.GameService.IVirtualBoardService {
        
        public VirtualBoardServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public VirtualBoardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public VirtualBoardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public VirtualBoardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public VirtualBoardServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectBoard(System.Guid gameId, System.Guid playerId) {
            base.Channel.ConnectBoard(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task ConnectBoardAsync(System.Guid gameId, System.Guid playerId) {
            return base.Channel.ConnectBoardAsync(gameId, playerId);
        }
        
        public void TryMovePiece(System.Guid gameId, int pieceId, ActionChessClient.GameService.CPoint newPosition) {
            base.Channel.TryMovePiece(gameId, pieceId, newPosition);
        }
        
        public System.Threading.Tasks.Task TryMovePieceAsync(System.Guid gameId, int pieceId, ActionChessClient.GameService.CPoint newPosition) {
            return base.Channel.TryMovePieceAsync(gameId, pieceId, newPosition);
        }
    }
}
